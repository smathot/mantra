# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_camera', [dirname(__file__)])
        except ImportError:
            import _camera
            return _camera
        if fp is not None:
            try:
                _mod = imp.load_module('_camera', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _camera = swig_import_helper()
    del swig_import_helper
else:
    import _camera
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def camera_init(*args):
  return _camera.camera_init(*args)
camera_init = _camera.camera_init

def camera_close():
  return _camera.camera_close()
camera_close = _camera.camera_close

def camera_capture():
  return _camera.camera_capture()
camera_capture = _camera.camera_capture

def camera_get_px(*args):
  return _camera.camera_get_px(*args)
camera_get_px = _camera.camera_get_px

def camera_put_px(*args):
  return _camera.camera_put_px(*args)
camera_put_px = _camera.camera_put_px

def camera_save_frame(*args):
  return _camera.camera_save_frame(*args)
camera_save_frame = _camera.camera_save_frame

def camera_to_string():
  return _camera.camera_to_string()
camera_to_string = _camera.camera_to_string

def camera_get_control(*args):
  return _camera.camera_get_control(*args)
camera_get_control = _camera.camera_get_control

def camera_set_control(*args):
  return _camera.camera_set_control(*args)
camera_set_control = _camera.camera_set_control

def camera_control_available(*args):
  return _camera.camera_control_available(*args)
camera_control_available = _camera.camera_control_available

def camera_get_width():
  return _camera.camera_get_width()
camera_get_width = _camera.camera_get_width

def camera_get_height():
  return _camera.camera_get_height()
camera_get_height = _camera.camera_get_height

def match_at(*args):
  return _camera.match_at(*args)
match_at = _camera.match_at

def color_match(*args):
  return _camera.color_match(*args)
color_match = _camera.color_match

def highlight_color(*args):
  return _camera.highlight_color(*args)
highlight_color = _camera.highlight_color

def track_object(*args):
  return _camera.track_object(*args)
track_object = _camera.track_object

cvar = _camera.cvar

